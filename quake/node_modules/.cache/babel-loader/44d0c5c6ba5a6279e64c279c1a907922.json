{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denis\\\\quake-fe-pt9\\\\quake\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport L from 'leaflet';\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\nimport data from '../data/2.5_month.geojson.json';\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 0,\n      lng: 0,\n      zoom: 1,\n      quakes: data,\n      // geoJSON data\n      mag: 5,\n      // minimun magnitude to display on map.\n      geojsonMarkerOptions: {\n        // These are options to be passed to markerStyles().\n        radius: 8,\n        fillColor: \"#f00\",\n        // red\n        color: \"#000\",\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.5\n      }\n    }; // fn passed to the filter prop of react-leaflets GeoJSON component.\n\n    this.filterByMag = (feature, layer) => {\n      return feature.properties.mag >= this.state.mag;\n    }; // styles fn to pass to pointToLayer() to have the quakes appear as red circles.\n    // the .bindPopup() creates a popup for each circle showing the quake titles.\n\n\n    this.markerStyles = (feature, latlng) => {\n      return L.circleMarker(latlng, this.state.geojsonMarkerOptions).bindPopup(function (layer) {\n        return feature.properties.title;\n      });\n    };\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return /*#__PURE__*/React.createElement(Map, {\n      className: \"map\",\n      center: position,\n      zoom: this.state.zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GeoJSON, {\n      data: this.state.quakes,\n      pointToLayer: this.markerStyles,\n      filter: this.filterByMag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["C:/Users/denis/quake-fe-pt9/quake/src/components/WorldMap.js"],"names":["React","Component","L","Map","TileLayer","GeoJSON","data","WorldMap","constructor","state","lat","lng","zoom","quakes","mag","geojsonMarkerOptions","radius","fillColor","color","weight","opacity","fillOpacity","filterByMag","feature","layer","properties","markerStyles","latlng","circleMarker","bindPopup","title","render","position"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,SAAQC,GAAR,EAAaC,SAAb,EAAwBC,OAAxB,QAAsC,eAAtC;AAEA,OAAOC,IAAP,MAAiB,gCAAjB;;AAEA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAC/BO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,CADM;AAEXC,MAAAA,GAAG,EAAE,CAFM;AAGXC,MAAAA,IAAI,EAAE,CAHK;AAIXC,MAAAA,MAAM,EAAEP,IAJG;AAIG;AACdQ,MAAAA,GAAG,EAAE,CALM;AAKH;AACRC,MAAAA,oBAAoB,EAAE;AAAE;AACtBC,QAAAA,MAAM,EAAE,CADY;AAEpBC,QAAAA,SAAS,EAAE,MAFS;AAED;AACnBC,QAAAA,KAAK,EAAE,MAHa;AAIpBC,QAAAA,MAAM,EAAE,CAJY;AAKpBC,QAAAA,OAAO,EAAE,GALW;AAMpBC,QAAAA,WAAW,EAAE;AANO;AANX,KAAb,CAFY,CAiBZ;;AACA,SAAKC,WAAL,GAAmB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrC,aAAOD,OAAO,CAACE,UAAR,CAAmBX,GAAnB,IAA0B,KAAKL,KAAL,CAAWK,GAA5C;AACD,KAFD,CAlBY,CAqBZ;AACA;;;AACA,SAAKY,YAAL,GAAqB,CAACH,OAAD,EAAUI,MAAV,KAAqB;AACxC,aAAOzB,CAAC,CAAC0B,YAAF,CAAeD,MAAf,EAAuB,KAAKlB,KAAL,CAAWM,oBAAlC,EACJc,SADI,CACM,UAAUL,KAAV,EAAiB;AAC1B,eAAOD,OAAO,CAACE,UAAR,CAAmBK,KAA1B;AACD,OAHI,CAAP;AAID,KALD;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAG,CAAC,KAAKvB,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAAjB;AACA,wBACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,MAAM,EAAEqB,QAA7B;AAAuC,MAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWG,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAC,2EADd;AAEE,MAAA,GAAG,EAAC,oDAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAKE,oBAAC,OAAD;AACE,MAAA,IAAI,EAAE,KAAKH,KAAL,CAAWI,MADnB;AAEE,MAAA,YAAY,EAAE,KAAKa,YAFrB;AAGE,MAAA,MAAM,EAAE,KAAKJ,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAaD;;AA/C8B;;AAkDjC,eAAef,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport L from 'leaflet';\nimport {Map, TileLayer, GeoJSON} from 'react-leaflet';\n\nimport data from '../data/2.5_month.geojson.json';\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 0,\n      lng: 0,\n      zoom: 1,\n      quakes: data, // geoJSON data\n      mag: 5, // minimun magnitude to display on map.\n      geojsonMarkerOptions: { // These are options to be passed to markerStyles().\n        radius: 8,\n        fillColor: \"#f00\", // red\n        color: \"#000\",\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.5\n      },\n    };\n    // fn passed to the filter prop of react-leaflets GeoJSON component.\n    this.filterByMag = (feature, layer) => {\n      return feature.properties.mag >= this.state.mag;\n    };\n    // styles fn to pass to pointToLayer() to have the quakes appear as red circles.\n    // the .bindPopup() creates a popup for each circle showing the quake titles.\n    this.markerStyles =  (feature, latlng) => {\n      return L.circleMarker(latlng, this.state.geojsonMarkerOptions)\n        .bindPopup(function (layer) {\n          return feature.properties.title;\n        });\n    };\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <Map className=\"map\" center={position} zoom={this.state.zoom}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          data={this.state.quakes}\n          pointToLayer={this.markerStyles}\n          filter={this.filterByMag}\n        />\n      </Map>\n    )\n  }\n}\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}